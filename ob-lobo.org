* Implementation

#+begin_src elisp :exports code :results silent :tangle ob-lobo.el
  (defun get-buffer-local-wstp-connection ()
    (when (not (boundp (make-local-variable 'wstp-connection)))
      (message "creating new buffer-local wstp connection")
      (set (make-local-variable 'wstp-connection)
           (wstp-init "emacs" "-linkmode" "launch" "-linkname" "/Applications/Mathematica.app/Contents/MacOS/WolframKernel -wstp"))
      (add-hook 'kill-buffer-hook
                (lambda ()
                  (wstp-end wstp-connection))
                t
                t))
    wstp-connection)

  (defun mathemathica-fullform-sexpr-to-mexpr (var)
    (pcase var
      (`(,f . ,args)
       (concat (mathemathica-fullform-sexpr-to-mexpr f)
               "["
               (mapconcat 'mathemathica-fullform-sexpr-to-mexpr args ", ")
               "]"))
      ((and (pred stringp)
            s)
       (format "\"%s\"" s))
      (`##"##")
      ((and (pred symbolp)
            s)
       (format "%s"
               (symbol-name s)))
      ((and (pred integerp)
            i)
       (format "%d" i))))

  (defun org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr (var &optional context-is-quoted-list)
    (pcase var
      (`(function ,(and (pred listp) ;; unquoted lists in quoted context
                        (guard context-is-quoted-list)
                        v))
       (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr `(List . ,v)
                                                          context-is-quoted-list) ;; Process as Fullform Expression
       )
      (`(function ,(and (pred listp) ;; unquoted lists
                        (guard (not context-is-quoted-list))
                        v))
       (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr `(Function . ,v)
                                                          context-is-quoted-list) ;; Process as Fullform Expression
       )
      (`(quote ,(and (pred listp) ;; quoted lists
                     v))
       (let ((result (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr `(List . ,v)
                                                                         t) ;; Process as Fullform Expression
                     ))
         (if context-is-quoted-list `(Hold ,result) result)
         )
       )
      ((and (pred vectorp) ;; vectors
            v)
       (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr `(List . ,v)
                                                          context-is-quoted-list) ;; Process as Fullform Expression
       )
      (`(quote [,lhs ,rhs])
       `(Rule ,(org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr lhs context-is-quoted-list) ;;

              ,(org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr rhs context-is-quoted-list)))
      (`(function ,(and (pred vectorp)
                        rules))
       (append '(Association)
               (map 'list
                    (lambda (var)
                      (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr var context-is-quoted-list))
                    rules)))
      ((and (guard context-is-quoted-list)
            (pred listp)
            (pred (lambda (e)
                    (not (eq 'List (car e)))))
            v)
       (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr `(List . ,v)
                                                          t))
      (`(,f . ,args)
       (append (list (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr f context-is-quoted-list))
               (map 'list
                    (lambda (var)
                      (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr var context-is-quoted-list))
                    args)))
      ((and (pred stringp)
            s) s)
      ((and (pred symbolp)
            s) s)
      ((and (pred integerp)
            i) i)))

  (defun org-babel-execute:lobo-to-sexpr (body params)
    (let* ((file-ext (cdr (assq :file-ext params)))
           (body (car (read-from-string body))))
      (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr body)))

  (defgroup lobo nil "Lobo -- run elisp code in wolfram engine" :group 'org-babel
    :prefix "lobo-")

  (defcustom lobo-execution-engine-connection 'ob-mathematica
    "The way we connect to mathematica"
    :type '(choice (const ob-mathematica)
                   (const wstp)):group'lobo)

  (defun org-babel-execute:lobopile (body params)
    (let* ((file-ext (cdr (assq :file-ext params)))
           (file (cdr (assq :file params)))
           (body (car (read-from-string body)))
           (fullform (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr
                      (cond (file `(Export ,file ,body))
                            (file-ext
                             `(Export ,(org-babel-temp-file nil
                                                            (concat "." file-ext))
                                      ,body))
                            (t body)))))
      (mathemathica-fullform-sexpr-to-mexpr fullform)))

  (defun org-babel-execute:lobo (body params)
  (cl-case lobo-execution-engine-connection
    ('ob-mathematica
     (org-babel-execute:mathematica (concat "SetOptions[ $Output, FormatType -> InputForm ];\n"
                                            (org-babel-execute:lobopile body params))
                                    (assq-delete-all :file (copy-alist params))))

    ('wstp
     (let* ((file-ext (cdr (assq :file-ext params)))
            (file (cdr (assq :file params)))
            (body (car (read-from-string body)))
            (fullform (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr
                       (cond (file `(Export ,file ,body))
                             (file-ext
                              `(Export ,(org-babel-temp-file nil
                                                             (concat "." file-ext))
                                       ,body))
                             (t body)))))
       (wstp-run (get-buffer-local-wstp-connection)
                 `(With ,(append '(List)
                                 (map 'list
                                      (lambda (pair)
                                        `(Set ,(car pair)
                                              (quote ,(cdr pair))))
                                      (org-babel--get-vars params)))
                        ,fullform))))))

  (define-derived-mode lobo-mode emacs-lisp-mode "lobo")
  (define-derived-mode lobopile-mode lobo-mode "lobo")

  (eval-after-load 'lispy
    '(add-to-list 'lispy-eval-alist
                  '(lobo-mode (lambda (duh)
                                (org-babel-lobo-sexpr-to-mathematica (car (read-from-string (lispy--string-dwim)))))
                              nil)))

  (provide 'ob-lobo)
#+end_src


* Tests

#+begin_src elisp :results output :tangle ob-lobo-test.el
  (ert-deftest lobopile-empty-list
      ()
    (should (string-equal (org-babel-execute:lobopile "[]" nil)
                          "List[]")))

  (ert-deftest lobopile-list
      ()
    (should (string-equal (org-babel-execute:lobopile "[1 3 4]" nil)
                          "List[1, 3, 4]")))

  (ert-deftest lobopile-quoted-list
      ()
    (should (string-equal (org-babel-execute:lobopile "'((5 7) 9)" nil)
                          "List[List[5, 7], 9]")))

  (ert-deftest lobopile-quoted-list-with-symbol
      ()
    (should (string-equal (org-babel-execute:lobopile "'(List (5 7) 9)" nil)
                          "List[List, List[5, 7], 9]")))

  (ert-deftest lobopile-quoted-vector-becomes-rule
      ()
    (should (string-equal (org-babel-execute:lobopile "'[age 7]" nil)
                          "Rule[age, 7]")))

  (ert-deftest lobopile-function-quoted-vector-becomes-association
      ()
    (should (string-equal (org-babel-execute:lobopile "#'['[age 7]]" nil)
                          "Association[Rule[age, 7]]")))

  (ert-deftest lobopile-quoted-list-with-nested-quoted-list
      ()
    (should (string-equal (org-babel-execute:lobopile "'('(5 7) 9)" nil)
                          "List[Hold[List[5, 7]], 9]")))

#+end_src

* Usage

** Syntactic constructs

*** Symbols
#+begin_src lobo
  x ;; just a symbol named x
#+end_src

*** Lists
  #+begin_src lobo
    [x 9 "howdie"] ;; a list of three elements
  #+end_src

*** Rules
  #+begin_src lobo
    '[x 9] ;; a rule that transforms x to 9
  #+end_src

*** Associations
  #+begin_src lobo
    #'['[x 9]]
  #+end_src

*** Lambdas/Functions
#+begin_src lobo
  ;; This is an identity function:
  #'(##) ;; <- #'( ) creates a lambda/function, ## is the argument list (or single argument)
#+end_src

** Complex examples

*** Lambdas/functions

  #+begin_src lobo
    (Map ;;
     #'([## (Power ## 2)]) ;; <- Map function
     [1 2 3 4];; <- elisp vectors are translated to wolfram lists
    )
  #+end_src

*** A complex example using the wolfram knowledge base
  #+begin_src lobo
    (Join ['("Name" "Capital" "Population") ;; <- quoted lists are also translated to wolfram lists
           hline ;; <- symbols remain symbols
           ]
          (Map #'([(CountryData ##"Name")
                   (CommonName (CountryData ##"CapitalCity"))
                   (ToString (CountryData ##"Population"))])
               (CountryData "G7")))
  #+end_src

*** A chart 
  #+begin_src lobo :file-ext png :var background=(plist-get (custom-face-attributes-get 'default nil) :background) 
    (BarChart #'['[me 4]
                 '[you 9]
                 '[others 1]]
              '[ChartLabels Automatic]
              '[PlotTheme ["BackgroundColor"
                           (RGBColor background)]])
  #+end_src

*** Embedding an SVG chart

  #+begin_src lobo :exports results :cache yes :results html
    (StringTrim (StringReplace (ExportString (TimelinePlot [(Entity "HistoricalEvent" "WorldWar1")
                                                           (Entity "HistoricalEvent" "WorldWar2")
                                                           (Entity "HistoricalEvent" "VietnamWar")
                                                           (Entity "HistoricalEvent" "KoreanWarBegins")])
                                            "SVG")
                              '[(Shortest (StringExpression __ "\n")) ""]
                              1) "\n")
  #+end_src

