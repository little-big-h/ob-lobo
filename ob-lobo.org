* Implementation

#+begin_src elisp :exports code :results silent :tangle ob-lobo.el
  (defun mathemathica-fullform-sexpr-to-mexpr (var)
    (pcase var
      (`(,f . ,args)
       (concat (org-babel-lobo-sexpr-to-mathematica f)
               "["
               (mapconcat 'org-babel-lobo-sexpr-to-mathematica args ", ")
               "]"))
      ((and (pred stringp)
            s)
       (format "\"%s\"" s))
      ((and (pred symbolp)
            s)
       (format "%s"
               (symbol-name s)))
      ((and (pred integerp)
            i)
       (format "%d" i))))

  (defun org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr (var)
    (pcase var
      (`(function ,(and (pred listp) ;; quoted lists
                        v))
       (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr `(Function . ,v)) ;; Process as Fullform Expression
       )
      (`(quote ,(and (pred listp) ;; quoted lists
                     v))
       (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr `(List . ,v)) ;; Process as Fullform Expression
       )
      ((and (pred vectorp) ;; vectors
            v)
       (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr `(List . ,v)) ;; Process as Fullform Expression
       )
      (`(quote [,lhs ,rhs])
       `(Rule ,(org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr lhs) ;;

              ,(org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr rhs)))
      (`(function ,(and (pred vectorp)
                        rules))
       (append '(Association)
               (map 'list #'org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr rules)))
      (`(,f . ,args)
       (append (list (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr f))
               (map 'list #'org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr args)))
      ((and (pred stringp)
            s) s)
      ((and (pred symbolp)
            s) s)
      ((and (pred integerp)
            i) i)))

  (defun org-babel-execute:lobo-to-sexpr (body params)
    (let* ((file-ext (cdr (assq :file-ext params)))
           (body (car (read-from-string body))))
      (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr body)))

  (defun org-babel-execute:lobopile (body params)
    (let* ((file-ext (cdr (assq :file-ext params)))
           (body (car (read-from-string body))))
      (mathemathica-fullform-sexpr-to-mexpr 
       (org-babel-lobo-sexpr-to-mathmatica-fullform-sexpr (if file-ext
                                                              `(Export ,(org-babel-temp-file nil
                                                                                             (concat "." file-ext))
                                                                       ,body)
                                                            body)))))

  (defun org-babel-execute:lobo (body param)
    (org-babel-execute:mathematica (concat "SetOptions[ $Output, FormatType -> InputForm ];\n"
                                           (org-babel-execute:lobopile body param))
                                   param))

  (define-derived-mode lobo-mode emacs-lisp-mode "lobo")
  (define-derived-mode lobopile-mode lobo-mode "lobo")

  (eval-after-load 'lispy
    '(add-to-list 'lispy-eval-alist
                  '(lobo-mode (lambda (duh)
                                (org-babel-lobo-sexpr-to-mathematica (car (read-from-string (lispy--string-dwim)))))
                              nil)))


#+end_src


* Tests

#+begin_src elisp :results output :tangle ob-lobo-test.el
  (ert-deftest lobopile-empty-list
      ()
    (should (string-equal (org-babel-execute:lobopile "[]" nil)
                 "List[]")))

  (ert-deftest lobopile-list
      ()
    (should (string-equal (org-babel-execute:lobopile "[1 3 4]" nil)
                 "List[1, 3, 4]")))
#+end_src

* Usage

** Syntactic constructs

*** Symbols
#+begin_src lobo
  x ;; just a symbol named x
#+end_src

*** Lists
  #+begin_src lobo
    [x 9 "howdie"] ;; a list of three elements
  #+end_src

*** Rules
  #+begin_src lobo
    '[x 9] ;; a rule that transforms x to 9
  #+end_src

*** Associations
  #+begin_src lobo
    #'['[x 9]]
  #+end_src

*** Lambdas/Functions
#+begin_src lobo
  ;; This is an identity function:
  #'(##) ;; <- #'( ) creates a lambda/function, ## is the argument list (or single argument)
#+end_src

** Complex examples

*** Lambdas/functions

  #+begin_src lobo
    (Map ;;
     #'([## (Power ## 2)]) ;; <- Map function
     [1 2 3 4];; <- elisp vectors are translated to wolfram lists
    )
  #+end_src

*** A complex example using the wolfram knowledge base
  #+begin_src lobo
    (Join ['("Name" "Capital" "Population") ;; <- quoted lists are also translated to wolfram lists
           hline ;; <- symbols remain symbols
           ]
          (Map #'([(CountryData ##"Name")
                   (CommonName (CountryData ##"CapitalCity"))
                   (ToString (CountryData ##"Population"))])
               (CountryData "G7")))
  #+end_src

*** A chart 
  #+begin_src lobo :file-ext png :var background=(plist-get (custom-face-attributes-get 'default nil) :background) 
    (BarChart #'['[me 4]
                 '[you 9]
                 '[others 1]]
              '[ChartLabels Automatic]
              '[PlotTheme ["BackgroundColor"
                           (RGBColor background)]])
  #+end_src

*** Embedding an SVG chart

  #+begin_src lobo :exports results :cache yes :results html
    (StringTrim (StringReplace (ExportString (TimelinePlot [(Entity "HistoricalEvent" "WorldWar1")
                                                           (Entity "HistoricalEvent" "WorldWar2")
                                                           (Entity "HistoricalEvent" "VietnamWar")
                                                           (Entity "HistoricalEvent" "KoreanWarBegins")])
                                            "SVG")
                              '[(Shortest (StringExpression __ "\n")) ""]
                              1) "\n")
  #+end_src

